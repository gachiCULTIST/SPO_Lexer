number /[0-9]+(\.[0-9]*)?([eE][\+\-]?[0-9]+)?/ { text }
plus /\+/ {text}
minus /\-/ {text}
pow /^/ {text}
division /\// {text}
multiply /\*/ {text}
id /[a-z_][a-z_0-9]*/ {text}
lparen /\(/ {text}
rparen /\)/ {text}
comma /,/ {text}
init /=/ {text}
def /def:/ {text}
/ +/
call /:call/ {text /* мне лень вручную это добавлять в перечисление */}
uminus /:uminus/ {text /* мне лень вручную это добавлять в перечисление */}

%%

%top {
	using LexSyntGenerator;
}

D -> def id init E { new Variable(_2, _4) }
  | def id lparen P rparen init E { new Function(_2, _4, _7) }
  | E {_1}
;

P -> id id comma P { _4.addParametr(_1, _2) }
  | id id { new Parametrs(_1, _2) }
  | { new Parametrs() }
;
E -> E plus T { new BinOperator(TokenType.Tok_plus, _1, _3) } 
  | E minus T { new BinOperator(TokenType.Tok_minus, _1, _3) }
  | T {_1}
;
T -> T multiply F { new BinOperator(TokenType.Tok_multiply, _1, _3) }
  | T division F  { new BinOperator(TokenType.Tok_division, _1, _3) }
  | F {_1}
;
F -> V pow F { new BinOperator(TokenType.Tok_pow, _1, _3) }
  | V {_1}
;
V -> lparen E rparen { _2 }
  | id lparen A rparen { new FuncUsage(_1, _3) }
  | id { new VarUsage(_1) }
  | number { new Number(_1) }
  | minus V { new UnOperator(TokenType.Tok_uminus, _2) }
;

A -> E comma A { _3.addArgument(_1) }
  | E { new Arguments(_1) }
  | {new Arguments() }
;